<?xml version="1.0" encoding="UTF-8"?>
<!-- see Product.wxs.comments.txt for more comments -->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" 
    xmlns:util="http://schemas.microsoft.com/wix/UtilExtension" 
>
  <!--
      The Product attributes:
        UpgradeCode:
          GUID defining the product across versions. E.g. a previous version is uninstalled during upgrade.
          In other words:
          For update (or upgrade), Windows Installer relies on the UpgradeCode attribute of the Product tag.
          Keep the same UpgradeCode GUID as long as you want the products to be upgraded by the installer.
        Id:
          From https://wixtoolset.org/documentation/manual/v3/xsd/wix/product.html
            The product code GUID for the product. Type: AutogenGuid
          From https://docs.microsoft.com/en-us/windows/win32/msi/product-codes
            The product code is a GUID that is the principal identification of an application or product.
          From https://docs.microsoft.com/en-us/windows/win32/msi/productcode
            This ID must vary for different versions and languages.
          From https://docs.microsoft.com/en-us/windows/win32/msi/changing-the-product-code
            The product code must be changed if any of the following are true for the update:
              - The name of the .msi file has been changed.
          From https://docs.microsoft.com/en-us/windows/win32/msi/major-upgrades
            A major upgrade is a comprehensive update of a product that needs a change of the ProductCode Property.
            A typical major upgrade removes a previous version of an application and installs a new version.
          From old advise:
            A constant Product code  GUID is useful for a subsequent mst (transform).
            To be safe for a major upgrade, the Id (product code GUI) is dynamic/autogenerated: * (star)
          Final conclusion: 
            We use "*"
  -->
  <Product
      Manufacturer = "SaltStack, Inc."
      Name         = "Salt Minion $(var.DisplayVersion)"
      Version      = "$(var.InternalVersion)"
      UpgradeCode  = "FC6FB3A2-65DE-41A9-AD91-D10A402BD641" 
      Id           = "*"
      Language     = "1033">

    <!-- Windows Installer Version 3.0 = 300 -->
    <Package InstallScope="perMachine"  InstallerVersion="300" Compressed="yes"/>

    <!--
      Conditionally block installation
      
      Quote from https://wixtoolset.org/documentation/manual/v3/xsd/wix/condition.html
         "The condition is specified in the inner text of the element. "
      
      Quotes from    https://www.firegiant.com/wix/tutorial/com-expression-syntax-miscellanea/expression-syntax
            "Properties in expressions"
            "PROPERTY This will evaluate to true if the property has been set and has any value, even if this value is false or 0."
            "NOT PROPERTY This will evaluate to true if the property has not been set at all."
            

      On the XML CDATA Section
      Quotes from https://www.firegiant.com/wix/tutorial/com-expression-syntax-miscellanea/expression-syntax
         "you have to be cautious when you use angle brackets that can be mistaken for an opening or closing character of an XML tag"
         "The safest approach would be to wrap everything"      
         
      I found that I *must* use the CDATA section even around simple properties.
      
      Properties:
       - MsiNTProductType:  1=Workstation  2=Domain controller  3=Server
       - VersionNT:         https://msdn.microsoft.com/library/aa370556.aspx
       - PhysicalMemory     https://docs.microsoft.com/en-us/windows/desktop/Msi/physicalmemory
      From the how-to http://wixtoolset.org/documentation/manual/v3/howtos/redistributables_and_install_checks/block_install_on_os.html

    -->
    <Condition Message="Installation requires Windows 7/Server 2012. Found MsiNTProductType [MsiNTProductType], VersionNT [VersionNT]">
      <![CDATA[
      Installed 
      OR  (MsiNTProductType = 1) AND (VersionNT >= 601)
      OR  (MsiNTProductType = 2) AND (VersionNT >= 602)
      OR  (MsiNTProductType = 3) AND (VersionNT >= 602)
      ]]>
    </Condition>
    <Condition Message="Installation requires 125 MB RAM. Found [PhysicalMemory] MB"><![CDATA[Installed OR (PhysicalMemory > 125)]]></Condition>
    <Condition Message="Installation requires Administrator privileges">             <![CDATA[Privileged]]>                         </Condition>

    <!-- Block installation when the user uses deprecated properties  -->
    <Condition Message="Please rename MASTER_HOSTNAME to MASTER"           ><![CDATA[Installed OR NOT MASTER_HOSTNAME]]>     </Condition>
    <Condition Message="Please rename MINION_HOSTNAME to MINION_ID"        ><![CDATA[Installed OR NOT MINION_HOSTNAME]]>     </Condition>
    <Condition Message="Please rename START_MINION_SERVICE to START_MINION"><![CDATA[Installed OR NOT START_MINION_SERVICE]]></Condition>

    <!-- Block installation when the user uses wrong property values -->
    <Condition Message="CONFIG_TYPE must not be '[CONFIG_TYPE]'. Please use 'Existing', 'Custom', 'Default' or 'New'.">
      <![CDATA[
      Installed 
      OR  (CONFIG_TYPE = "Existing")
      OR  (CONFIG_TYPE = "Custom")
      OR  (CONFIG_TYPE = "Default")
      OR  (CONFIG_TYPE = "New")
      ]]>
    </Condition>
    <Condition Message="ZMQ_FILTERING must not be [ZMQ_FILTERING]. Please use 1 or &quot;&quot; (two double quotes).">
      <![CDATA[
      Installed
      OR  (ZMQ_FILTERING = 1)
      OR  (NOT ZMQ_FILTERING)      
      ]]>
    </Condition>
    <Condition Message="MINION_ID_CACHING must not be [MINION_ID_CACHING]. Please use 1 or &quot;&quot; (two double quotes).">
      <![CDATA[
      Installed
      OR  (MINION_ID_CACHING = 1)
      OR  (NOT MINION_ID_CACHING)      
      ]]>
    </Condition>
    <Condition Message="KEEP_CONFIG must not be [KEEP_CONFIG]. Please use 1 or &quot;&quot; (two double quotes).">
      <![CDATA[
      Installed
      OR  (KEEP_CONFIG = 1)
      OR  (NOT KEEP_CONFIG)      
      ]]>
    </Condition>


    <!--
      Set default values for Salt msi properties
        Naming conventions:   https://docs.microsoft.com/en-us/windows/win32/msi/restrictions-on-property-names
        Public properties may be changed by the user and must be upper-case.

        On msi properties, logic expressions and checkboxes:
          A msi property is false if and only if it is unset, undefined, missing, the empty string (msi properties are strings).
          A checkbox is empty if and only if the relevant msi property is false.

        These are the msi properties unset by default:
           MASTER
           MASTER_KEY
           MINION_ID
           MINION_ID_FUNCTION
           MINION_ID_REMOVE_DOMAIN
           MINION_CONFIG
           ZMQ_FILTERING

        On msi properties, use in custom actions:
          DECAC means "Deferred cusmtom action in C#"
          CADH  means "Custom action data helper"
          You *must* mention each msi property at the CADH helper or the DECAC function will crash:
          (A DECAC that tries to use a msi property not listed in its CADH crashes).
            Example:
              In the CADH:
                master=[MASTER];minion_id_function=[MINION_ID_FUNCTION]
              In the DECAC:
                session.CustomActionData["master"]      THIS IS OK
                session.CustomActionData["mister"]      THIS WILL CRASH           
    -->

    <Property Id="MINION_ID_CACHING"        Value="1"                    />
    <Property Id="MINION_CONFIGFILE"        Value="C:\salt\conf\minion"  />
    <Property Id="CONFIG_TYPE"              Value="Existing"             />
    <Property Id="START_MINION"             Value="1"                    />
    <Property Id="KEEP_CONFIG"              Value="1"                    />


    <!-- 
    Windows Installer msi properties              https://docs.microsoft.com/en-us/windows/win32/msi/property-reference
    
    Logging into %TEMP%\MSIxxxxx.LOG  
    All MsiLogging values 
      I Status messages.
      w Nonfatal warnings.
      e All error messages.
      a Start up of actions.
      r Action-specific records.
      u User requests.
      c Initial UI parameters.
      m Out-of-memory or fatal exit information.
      o Out-of-disk-space messages.
      p Terminal properties.
      x Extra debugging information. Only available on Windows Server 2003.
      ! Flush each line to the log.    
      v Verbose output.
    
    -->
    <Property Id="ARPHELPLINK"              Value="https://saltstack.com/support/"/>
    <Property Id="ARPURLINFOABOUT"          Value="https://saltstack.com/community/"/>
    <Property Id="ARPURLUPDATEINFO"         Value="https://docs.saltstack.com/en/latest/topics/releases/"/>
    <Property Id="ROOTDRIVE"                Value="C:\"/>
    <Property Id="ARPPRODUCTICON"           Value="icon"/>
    <Property Id="MSIRESTARTMANAGERCONTROL" Value="Disable"/>
    <Property Id="MsiLogging"               Value="v"/>
    <Property Id="MSIUSEREALADMINDETECTION" Value="1"/>

    <!-- WiX msi properties
      WIXUI_INSTALLDIR
        From https://wixtoolset.org//documentation/manual/v3/wixui/dialog_reference/wixui_installdir.html
          Selecting a user interface
       http://www.dizzymonkeydesign.com/blog/misc/adding-and-customizing-dlgs-in-wix-3/
     -->
    <Property Id="WIXUI_INSTALLDIR"         Value="INSTALLFOLDER"        /> <!-- Note that this is the name of the property, not its value -->


    <!-- Sequences
      An msi in no linear program.
      To understand when custom actions will be executed, one must look at the condition within the tag and Before/After:

      On custom action conditions:
         http://resources.flexerasoftware.com/web/pdf/archive/IS-CHS-Common-MSI-Conditions.pdf
         https://docs.microsoft.com/en-us/windows/win32/msi/property-reference
       On the upgrade custom action condition:
         UPGRADINGPRODUCTCODE | does not work
         Installed            | the product is installed per-machine or for the current user
         Not Installed        | there is no previous version with the same UpgradeCode
         REMOVE ~= "ALL"      | Uninstall 

      From "Standard actions" https://docs.microsoft.com/en-us/windows/win32/msi/standard-actions-reference
          RemoveFiles            https://docs.microsoft.com/en-us/windows/win32/msi/removefiles-action
          RemoveExistingProducts https://docs.microsoft.com/en-us/windows/win32/msi/removeexistingproducts-action
          MigrateFeatureStates
          InstallInitialize
        
    
        Notes on ReadConfig_IMCAC:
          Note 1: 
            Problem: INSTALLFOLDER was not set in ReadConfig_IMCAC
            Solution:
            ReadConfig_IMCAC must not be called BEFORE FindRelatedProducts, but BEFORE MigrateFeatureStates because
            INSTALLFOLDER in only set in CostFinalize, which comes after FindRelatedProducts 
            Maybe one could call ReadConfig_IMCAC AFTER FindRelatedProducts
          Note 2:
            ReadConfig_IMCAC is in both InstallUISequence and InstallExecuteSequence, 
            but because it is declared Execute='firstSequence', it will not be repeated in InstallExecuteSequence if it has been called in InstallUISequence.
      -->
    
    
    
    <InstallUISequence>         <!-- * * * * * * * * * * * * * * * * * * Sequence with GUI * * * * * * * * * * * * * * * * * *  -->
      
      <Custom Action='ReadConfig_IMCAC'            Before='MigrateFeatureStates'        >NOT Installed</Custom>
      
      <LaunchConditions After="AppSearch" /> <!-- Benefit is unclear. Was used when detecting MFC. Probably not needed. -->
      
    </InstallUISequence>
    
    
    
    <InstallExecuteSequence>     <!-- * * * * * * * * * * * * * * * * * *  Sequence without GUI (silent, headless)  * * * * * * * * * * * * * * * * * *  -->
      
      <Custom Action='ReadConfig_IMCAC'            Before='MigrateFeatureStates'        >NOT Installed</Custom>

      <!-- del_NSIS_DECAC is a in-script custom action.  It must be sequenced between InstallInitialize and InstallFinalize in the InstallExecuteSequence  -->
      <Custom Action='del_NSIS_DECAC'              After='InstallInitialize'            >NOT Installed</Custom>
      
      <!--  Remove 'lifetime' data on uninstall (and upgrade?) Lifetime data is mainly *.pyc files. -->
      <Custom Action='Uninstall_incl_Config_CADH'   
              Before='Uninstall_incl_Config_DECAC'                                      >(REMOVE ~= "ALL") AND (NOT KEEP_CONFIG)</Custom>
      <Custom Action='Uninstall_incl_Config_DECAC' After='RemoveFiles'                  >(REMOVE ~= "ALL") AND (NOT KEEP_CONFIG)</Custom>
      
      <Custom Action='Uninstall_excl_Config_CADH'   
              Before='Uninstall_excl_Config_DECAC'                                      >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "1")</Custom>
      <Custom Action='Uninstall_excl_Config_DECAC' After='RemoveFiles'                  >(REMOVE ~= "ALL") AND (KEEP_CONFIG = "1")</Custom>


      <Custom Action='WriteConfig_CADH'     
              Before='WriteConfig_DECAC'                                                >NOT Installed</Custom>
      <Custom Action='WriteConfig_DECAC'           After='InstallFiles'                 >NOT Installed</Custom>

      <!-- Optionally start the service  -->
      <StartServices Sequence="5900"><![CDATA[START_MINION = "1"]]></StartServices>

    </InstallExecuteSequence>

    
    
    <!-- http://wixtoolset.org/documentation/manual/v3/howtos/updates/major_upgrade.html -->
    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />

    <!-- Delete a folder recursivly -->
    <!-- Inspiration 1: https://www.hass.de/content/wix-how-use-removefolderex-your-xml-scripts -->
    <!-- Inspiration 2: http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/   Simple Remember Pattern SRP-->
    <!-- Learn: Condition with KEEP_CONFIG is useless on Components and on Features -->
    <!-- SRP pattern
       We cannot recursivly delete the var folder because it contains the cache, we regard as configuration and optionally keep.
         It is the task of Uninstall_excl_Config_DECAC to selectivly delete the var folder
        The use of the SRP Pattern is limited.
    -->

    <!--     SRP: the Property that we'll remember  -->
    <Property Id="BINFOLDER">
      <!--   SRP:  the registry search that will reload our Property on repair, upgrade and uninstall -->
      <RegistrySearch  Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="BinPath" Type="raw"  Id="BINFOLDER_REGSEARCH" />
    </Property>

    <DirectoryRef Id="BINFOLDER">
      <Component Id="CleanupBinFolder" Guid="*">
        <!--   SRP: the registry key that remembers our DIR and RemoveFolderEx must read from registry. -->
        <RegistryValue Root="HKLM" Key="SOFTWARE\Saltstack\Salt Minion" Name="BinPath" Type="string" Value="[BINFOLDER]" KeyPath="yes" /> <util:RemoveFolderEx On="uninstall" Property="BINFOLDER" />
      </Component>
    </DirectoryRef>


    <DirectoryRef Id="TARGETDIR">
      <!-- 
      Quote from https://wiki.python.org/moin/WindowsCompilers
        Even though Python is an interpreted language, you may need to install Windows C++ compilers in some cases.
        For example, you will need to use them if you wish to:
         - Install a non-pure Python package from sources with Pip (if there is no Wheel package provided).
         - Compile a Cython or Pyrex file.

      Explicit list of cases which need the C++ runtime:
        - TODO/unknown

      Microsoft provides official C++ compilers called Visual C++, you can find them bundled with Visual Studio.

      Which Microsoft Visual C++ compiler to use with a specific Python version?
      Python     | VC++        | Visual Studio
        2.7      | VC90_CRT    | 2008
        3.5-8    | VC140_CRT   | 2015

      The msi incorporates the VC*_CRT as merge modules (*.msm), following the how-to:
        https://wixtoolset.org/documentation/manual/v3/howtos/redistributables_and_install_checks/install_vcredist.html
      -->
      <Merge Id="MSM_VC90_CRT_64" SourceFile="c:\salt_msi_resources\Microsoft_VC90_CRT_x86_x64.msm" DiskId="1" Language="0"/>
    </DirectoryRef>

    <Feature Id="ProductFeature" Title="Minion" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
      <ComponentRef      Id="CleanupBinFolder" />
      <Feature Id="VC90_CRT_x86_x64" Title="Visual C++ 9 64-bit Runtime" AllowAdvertise="no" Display="hidden" Level="1">
        <MergeRef Id="MSM_VC90_CRT_64"/>
      </Feature>
    </Feature>

    <Icon Id="icon" SourceFile="$(var.dist)\..\installer\salt.ico" />
    <WixVariable Id="WixUILicenseRtf" Value="LICENSE.rtf" />

    <!--
    Images:
      - Dimensions of images must follow http://wixtoolset.org/documentation/manual/v3/wixui/wixui_customizations.html
      - WixUIDialogBmp must be transparent
    Create imgLeft.png from panel.bmp:
       Open paint3D:
         - new image, ..., canvas options: Transparent canvas off, Resize image with canvas NO, Width 493 Height 312
         - paste panel.bmp, move to the left, save as
    -->
    <WixVariable Id="WixUIBannerBmp" Value="imgTop.jpg" />
    <WixVariable Id="WixUIDialogBmp" Value="imgLeft.png" />

    <UIRef Id="ProductUI" />                             <!-- Include ProductUI.wxs in this directory -->
    
    <MediaTemplate EmbedCab="yes" CompressionLevel="low" /> <!-- Do not create cab files -->
    
  </Product>

  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir"> <!-- Outmost directory must be exactly this. Ramirez ch 1 p 25 -->
      <Directory Id="INSTALLFOLDER" Name="salt" >
        <Directory Id="CONFFOLDER" Name="conf" />
        <!-- Declare bin and var folder for RemoveFolderEX remember pattern -->        
        <Directory Id="BINFOLDER"  Name="bin" />
        <Directory Id="VARFOLDER"  Name="var" />
      </Directory>
    </Directory>

    <!-- populate properties witch localised WixQueryOsWellKnownSID http://wixtoolset.org/documentation/manual/v3/customactions/osinfo.html -->
    <PropertyRef Id="WIX_ACCOUNT_ADMINISTRATORS" />

    <Component Id="InstallfolderPermissions"  Directory="INSTALLFOLDER" Guid="B30E119F-0286-4453-8AB7-C6E916FA2843">
      <CreateFolder> <!-- like mkdir, the folder will not be created if present. -->
        <!--
          Function win_verify_env()  in  salt/slt/utils/verify.py sets permissions on each start of the salt-minion services.
          The installer must create the folder with the same permissions, so you keep sets of permissions in sync.

          The Permission element(s) below replace any present permissions,
          except NT AUTHORITY\SYSTEM:(OI)(CI)(F), which seems to be the basis.
          Therefore, you don't need to specify User="[WIX_ACCOUNT_LOCALSYSTEM]"  GenericAll="yes"

          Use icacls to test the result:
            C:\>icacls salt
            salt BUILTIN\Administrators:(OI)(CI)(F)
                 NT AUTHORITY\SYSTEM:(OI)(CI)(F)
            ~~ read ~~
            (object inherit)(container inherit)(full access)

            C:\>icacls salt\bin\include
            salt\bin\include BUILTIN\Administrators:(I)(OI)(CI)(F)
                             NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F)
                             w7h64\Markus:(I)(OI)(CI)(F)
            ~~ read ~~
            (permission inherited from parent container)(object inherit)(container inherit)(full access)

          Maybe even the Administrator group full access is "basis", so there is no result of the instruction,
          I leave it for clarity, and potential future use.
          -->
        <Permission User="[WIX_ACCOUNT_ADMINISTRATORS]" GenericAll="yes" TakeOwnership="yes" />
      </CreateFolder>
    </Component>
  </Fragment>
  
  <!-- From the "Default WiX Project Template" -->
  <Fragment>
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <ComponentGroupRef Id="dist"    />       <!-- Include dist-amd64.wxs in this directory -->
      <ComponentGroupRef Id="service" /> 
      <!-- experimental, does not (yet) work.
           Intended to replace nssm (ssm) with the Windows method of starting a service.
           Maybe, nssm (ssm) cannot be replaced, because it indefineiy starts the salt-minion python exe over and over again,
           whereas the Windows method only starts an exe only a limited time and then stops.
           Also goto BuildDistFragment.xsl and remove python.exe
      <ComponentRef Id="servicePython" />
      -->
      <ComponentRef Id="InstallfolderPermissions" />
    </ComponentGroup>
  </Fragment>
</Wix>
